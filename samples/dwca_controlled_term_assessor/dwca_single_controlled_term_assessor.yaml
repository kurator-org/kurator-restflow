
# Example command-line usage:
# restflow -f dwca_single_controlled_term_assessor.yaml
#          -i dwca_core=data/occurrences_file.txt 
#          -i term=preparations


imports:

- classpath:/org/restflow/directors.yaml
- classpath:/org/restflow/python/types.yaml

components:

- id: DwCAControlledTermAssessor
  type: Workflow
  properties:
    director: !ref MTDataDrivenDirector
    nodes:
      - !ref ImportWorkflowParameters
      - !ref ProcessWorkflowParameters
      - !ref CountControlledVocabularyValues
      - !ref DownloadControlledVocabularyFile
      - !ref RecommendVocabularyValues
    inputs:
      dwca_core:
      term:

- id: ImportWorkflowParameters
  type: InPortal
  properties:
    outflows: 
      dwca_core: path_to_dwca_core_file
      term: dwc_term

- id: ProcessWorkflowParameters
  type: PythonActorNode
  properties:
    inflows:
      relative_path: path_to_dwca_core_file
      term: dwc_term
    actor.step: |
      absolute_path = os.path.abspath(relative_path)
      term_lowercase = term.lower()
    outflows:
      absolute_path: absolute_path_to_dwca_core_file
      term_lowercase: lowercase_term

- id: CountControlledVocabularyValues
  type: PythonActorNode
  properties:
    inflows:
      inputfile: absolute_path_to_dwca_core_file
      term: dwc_term
      term_lowercase: lowercase_term
    constants:
      workspace: '.'
      outputfile: counts.csv
      format: csv
    actor.usesStepDirectory: true
    actor.step: |

      from kurator_dwca.dwca_utils import read_header
      from kurator_dwca.dwca_utils import clean_header
      from kurator_dwca.term_value_count_reporter import term_value_count_reporter

      header = read_header(inputfile)
      cleanheader = clean_header(header)

      if term not in cleanheader:
          countsfile = None
          errormessage = None
      else:
        results = term_value_count_reporter({
            'workspace': workspace, 
            'termlist': [term], 
            'inputfile': inputfile,
            'outputfile': outputfile
        })
        if results['success']:
          countsfile = results['outputfile']
          errormessage = None
        else:
          countsfile = None
          errormessage = results['message']

    actor.outputs:
      countsfile: {type: File, nullable: true}
      errormessage: {nullable: true}
      term_lowercase:
    outflows:
      countsfile: file:count_{term_lowercase}.csv
      errormessage: file:count_reporter_error_for_{term_lowercase}.txt

- id: DownloadControlledVocabularyFile
  type: PythonActorNode
  properties:
    inflows:
      term_lowercase: lowercase_term
    constants:
      url_template: 'https://raw.githubusercontent.com/tucotuco/DwCVocabs/master/kurator/%s.txt'
      outputfile: vocab.txt
    actor.usesStepDirectory: true
    actor.step: |
      from kurator_dwca.downloader import downloader
      url = url_template % term_lowercase
      downloader({ 
          'url':        url, 
          'outputfile': outputfile
      })
    actor.outputs:
      outputfile: {type: File}
    outflows:
      outputfile: file:vocab_{term_lowercase}.txt

- id: RecommendVocabularyValues
  type: PythonActorNode
  properties:
    stepsOnce: true
    actor.inputs:
      term:
      term_lowercase:
      countfile: {nullable: true}
      vocabfile:
      outfilename:
    inflows:
      term: dwc_term
      countfile: file:count_{term_lowercase}.csv
      vocabfile: file:vocab_{}.txt
    constants:
      outfilename: recommendations.txt
    actor.usesStepDirectory: true
    actor.step: |

        from kurator_dwca.dwca_utils import clean_header
        from kurator_dwca.dwca_terms import controlledtermlist
        from kurator_dwca.term_recommendation_reporter import term_recommendation_reporter

        results = term_recommendation_reporter({
          'inputfile': countfile,
          'vocabfile': vocabfile,
          'outputfile': outfilename,
          'key': term,
        })

        if results['success']:
          recommendation_file = results['outputfile']
          errormessage = None
        else:
          recommendation_file = None
          errormessage = results['message']

    actor.outputs:
      recommendation_file: {type: File, nullable: true}
      errormessage: {nullable: true}
    outflows:
      recommendation_file: file:recommended_{term_lowercase}.csv
      errormessage: file:recommendation_error_for_{term_lowercase}.txt